/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UnitconverterRouteImport } from './routes/unitconverter'
import { Route as OperatorsRouteImport } from './routes/operators'
import { Route as MultiplechoiceRouteImport } from './routes/multiplechoice'
import { Route as FilesizeRouteImport } from './routes/filesize'
import { Route as DatatypesRouteImport } from './routes/datatypes'
import { Route as ConstructsRouteImport } from './routes/constructs'
import { Route as ChampionRouteImport } from './routes/champion'
import { Route as CapacitycalculatorRouteImport } from './routes/capacitycalculator'
import { Route as IndexRouteImport } from './routes/index'

const UnitconverterRoute = UnitconverterRouteImport.update({
  id: '/unitconverter',
  path: '/unitconverter',
  getParentRoute: () => rootRouteImport,
} as any)
const OperatorsRoute = OperatorsRouteImport.update({
  id: '/operators',
  path: '/operators',
  getParentRoute: () => rootRouteImport,
} as any)
const MultiplechoiceRoute = MultiplechoiceRouteImport.update({
  id: '/multiplechoice',
  path: '/multiplechoice',
  getParentRoute: () => rootRouteImport,
} as any)
const FilesizeRoute = FilesizeRouteImport.update({
  id: '/filesize',
  path: '/filesize',
  getParentRoute: () => rootRouteImport,
} as any)
const DatatypesRoute = DatatypesRouteImport.update({
  id: '/datatypes',
  path: '/datatypes',
  getParentRoute: () => rootRouteImport,
} as any)
const ConstructsRoute = ConstructsRouteImport.update({
  id: '/constructs',
  path: '/constructs',
  getParentRoute: () => rootRouteImport,
} as any)
const ChampionRoute = ChampionRouteImport.update({
  id: '/champion',
  path: '/champion',
  getParentRoute: () => rootRouteImport,
} as any)
const CapacitycalculatorRoute = CapacitycalculatorRouteImport.update({
  id: '/capacitycalculator',
  path: '/capacitycalculator',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/capacitycalculator': typeof CapacitycalculatorRoute
  '/champion': typeof ChampionRoute
  '/constructs': typeof ConstructsRoute
  '/datatypes': typeof DatatypesRoute
  '/filesize': typeof FilesizeRoute
  '/multiplechoice': typeof MultiplechoiceRoute
  '/operators': typeof OperatorsRoute
  '/unitconverter': typeof UnitconverterRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/capacitycalculator': typeof CapacitycalculatorRoute
  '/champion': typeof ChampionRoute
  '/constructs': typeof ConstructsRoute
  '/datatypes': typeof DatatypesRoute
  '/filesize': typeof FilesizeRoute
  '/multiplechoice': typeof MultiplechoiceRoute
  '/operators': typeof OperatorsRoute
  '/unitconverter': typeof UnitconverterRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/capacitycalculator': typeof CapacitycalculatorRoute
  '/champion': typeof ChampionRoute
  '/constructs': typeof ConstructsRoute
  '/datatypes': typeof DatatypesRoute
  '/filesize': typeof FilesizeRoute
  '/multiplechoice': typeof MultiplechoiceRoute
  '/operators': typeof OperatorsRoute
  '/unitconverter': typeof UnitconverterRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/capacitycalculator'
    | '/champion'
    | '/constructs'
    | '/datatypes'
    | '/filesize'
    | '/multiplechoice'
    | '/operators'
    | '/unitconverter'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/capacitycalculator'
    | '/champion'
    | '/constructs'
    | '/datatypes'
    | '/filesize'
    | '/multiplechoice'
    | '/operators'
    | '/unitconverter'
  id:
    | '__root__'
    | '/'
    | '/capacitycalculator'
    | '/champion'
    | '/constructs'
    | '/datatypes'
    | '/filesize'
    | '/multiplechoice'
    | '/operators'
    | '/unitconverter'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CapacitycalculatorRoute: typeof CapacitycalculatorRoute
  ChampionRoute: typeof ChampionRoute
  ConstructsRoute: typeof ConstructsRoute
  DatatypesRoute: typeof DatatypesRoute
  FilesizeRoute: typeof FilesizeRoute
  MultiplechoiceRoute: typeof MultiplechoiceRoute
  OperatorsRoute: typeof OperatorsRoute
  UnitconverterRoute: typeof UnitconverterRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/unitconverter': {
      id: '/unitconverter'
      path: '/unitconverter'
      fullPath: '/unitconverter'
      preLoaderRoute: typeof UnitconverterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/operators': {
      id: '/operators'
      path: '/operators'
      fullPath: '/operators'
      preLoaderRoute: typeof OperatorsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/multiplechoice': {
      id: '/multiplechoice'
      path: '/multiplechoice'
      fullPath: '/multiplechoice'
      preLoaderRoute: typeof MultiplechoiceRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/filesize': {
      id: '/filesize'
      path: '/filesize'
      fullPath: '/filesize'
      preLoaderRoute: typeof FilesizeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/datatypes': {
      id: '/datatypes'
      path: '/datatypes'
      fullPath: '/datatypes'
      preLoaderRoute: typeof DatatypesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/constructs': {
      id: '/constructs'
      path: '/constructs'
      fullPath: '/constructs'
      preLoaderRoute: typeof ConstructsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/champion': {
      id: '/champion'
      path: '/champion'
      fullPath: '/champion'
      preLoaderRoute: typeof ChampionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/capacitycalculator': {
      id: '/capacitycalculator'
      path: '/capacitycalculator'
      fullPath: '/capacitycalculator'
      preLoaderRoute: typeof CapacitycalculatorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CapacitycalculatorRoute: CapacitycalculatorRoute,
  ChampionRoute: ChampionRoute,
  ConstructsRoute: ConstructsRoute,
  DatatypesRoute: DatatypesRoute,
  FilesizeRoute: FilesizeRoute,
  MultiplechoiceRoute: MultiplechoiceRoute,
  OperatorsRoute: OperatorsRoute,
  UnitconverterRoute: UnitconverterRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
